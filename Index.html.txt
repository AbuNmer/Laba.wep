<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no" />
  <title>كادرينا</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: #000;
      color: #fff;
      text-align: center;
      direction: rtl;
      user-select: none;
    }
    .game-title {
      margin: 10px 0;
      font-size: 28px;
    }
    #scoreBoard {
      display: flex;
      justify-content: center;
    }
    #scoreContainer {
      display: flex;
      align-items: center;
      gap: 6px;
      background: rgba(255,255,255,0.1);
      padding: 4px 10px;
      border-radius: 8px;
    }
    #scoreContainer i { color: gold; }
    #gameArea {
      position: relative;
      width: 100%;
      max-width: 320px;
      height: 70vh;
      margin: 10px auto 0;
      background: url('https://i.ibb.co/b5THtL5y/IMG-4090.jpg') no-repeat center / cover;
      border: 2px solid #ff9800;
      border-radius: 12px;
      overflow: hidden;
    }
    #player {
      position: absolute;
      bottom: 10px;
      width: 20%;
      max-width: 80px;
      aspect-ratio: 1 / 1;
      background: url('https://i.ibb.co/NdgrwZ87/IMG-4071.png') no-repeat center/contain;
      transition: left 0.18s ease-out;
      z-index: 10;
    }
    .obstacle {
      position: absolute;
      width: 22%;
      max-width: 70px;
      aspect-ratio: 1 / 1;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      z-index: 5;
    }
    .coin {
      position: absolute;
      width: 14%;
      max-width: 40px;
      aspect-ratio: 1 / 1;
      background: url('https://i.ibb.co/1J9wrKHd/IMG-4088.png') no-repeat center/contain;
      animation: rotate 3s infinite linear, float 2s infinite ease-in-out;
      z-index: 5;
    }
    @keyframes rotate {
      from { transform: rotate(0); }
      to { transform: rotate(360deg); }
    }
    @keyframes float {
      0%,100% { transform: translateY(0);}
      50% { transform: translateY(-4px);}
    }
    .controls {
      margin-top: 14px;
      display: flex;
      justify-content: center;
      gap: 40px;
    }
    .control-btn {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      border: 2px solid #ff9800;
      background: rgba(255, 152, 0, 0.15);
      color: #fff;
      font-size: 22px;
    }
    #gameOver {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.9);
      color: #fff;
      padding: 20px 16px;
      border-radius: 12px;
      border: 2px solid #ff5722;
      z-index: 9999;
      width: 80%;
      max-width: 300px;
    }
    #gameOver p { margin-bottom: 12px; }
    #gameOver button {
      padding: 8px 14px;
      border-radius: 8px;
      border: 1px solid #ff9800;
      background: #ff9800;
      color: #000;
      font-weight: bold;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <h1 class="game-title">كادرينا</h1>
  <div id="scoreBoard">
    <div id="scoreContainer">
      <i class="fas fa-coins"></i>
      <span id="score">0</span>
    </div>
  </div>

  <div id="gameArea">
    <div id="player"></div>
  </div>

  <div class="controls">
    <button id="leftBtn" class="control-btn">←</button>
    <button id="rightBtn" class="control-btn">→</button>
  </div>

  <div id="gameOver">
    <p>خسرتِ يا حبيبتي ❤️</p>
    <button id="restartBtn">أعيدي المحاولة</button>
  </div>

  <audio id="coinSound" src="https://actions.google.com/sounds/v1/cartoon/clang_and_wobble.ogg"></audio>
  <audio id="obstacleSound" src="https://actions.google.com/sounds/v1/foley/wood_plank_flicks.ogg"></audio>
  <audio id="loseSound" src="https://actions.google.com/sounds/v1/alarms/beep_short.ogg"></audio>
  <audio id="moveSound" src="https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg"></audio>
  <audio id="bgMusic" loop src="https://www.bensound.com/bensound-music/bensound-funkyelement.mp3"></audio>

  <script>
    const gameArea = document.getElementById("gameArea");
    const player = document.getElementById("player");
    const scoreEl = document.getElementById("score");
    const gameOverEl = document.getElementById("gameOver");
    const restartBtn = document.getElementById("restartBtn");

    const coinSound = document.getElementById("coinSound");
    const obstacleSound = document.getElementById("obstacleSound");
    const loseSound = document.getElementById("loseSound");
    const moveSound = document.getElementById("moveSound");
    const bgMusic = document.getElementById("bgMusic");

    function getLanes() {
      const w = gameArea.clientWidth;
      return [w * 0.1, w * 0.4, w * 0.7];
    }
    let lanes = getLanes();
    let playerLane = 1;

    const obstacleImages = [
      "https://i.ibb.co/5XFm3ZyM/IMG-4096.png",
      "https://i.ibb.co/V0q0FjPc/IMG-4098.png"
    ];

    let score = 0;
    let gameSpeed = 2;
    let objects = [];
    let gameLoop = null;
    let isOver = false;

    let obstaclesPerSecond = 0.5;
    const maxObstaclesPerSecond = 1;
    const obstacleIncreaseInterval = 8000;

    let perSecondTimer = null;
    let coinsTimer = null;

    document.body.addEventListener("touchstart", startMusic, { once: true });
    document.body.addEventListener("mousedown", startMusic, { once: true });
    function startMusic() {
      bgMusic.volume = 0.35;
      bgMusic.play().catch(() => {});
    }

    startGame();

    window.addEventListener("keydown", (e) => {
      if (isOver) return;
      if (e.key === "ArrowLeft" || e.key === "a") moveLeft();
      if (e.key === "ArrowRight" || e.key === "d") moveRight();
    });
    document.getElementById("leftBtn").addEventListener("touchstart", (e) => { e.preventDefault(); moveLeft(); });
    document.getElementById("rightBtn").addEventListener("touchstart", (e) => { e.preventDefault(); moveRight(); });
    document.getElementById("leftBtn").addEventListener("mousedown", moveLeft);
    document.getElementById("rightBtn").addEventListener("mousedown", moveRight);

    restartBtn.addEventListener("click", restartGame);

    function startGame() {
      isOver = false;
      score = 0;
      scoreEl.textContent = score;
      objects = [];
      gameSpeed = 2;
      obstaclesPerSecond = 0.5;

      lanes = getLanes();
      playerLane = 1;
      player.style.left = lanes[playerLane] + "px";

      [...document.querySelectorAll(".obstacle,.coin")].forEach(el => el.remove());
      gameOverEl.style.display = "none";

      if (gameLoop) clearInterval(gameLoop);
      gameLoop = setInterval(updateGame, 16);

      if (coinsTimer) clearInterval(coinsTimer);
      coinsTimer = setInterval(spawnCoin, 2000);

      if (perSecondTimer) clearInterval(perSecondTimer);
      perSecondTimer = setInterval(() => {
        spawnObstacleBurst(Math.round(obstaclesPerSecond));
      }, 1000);

      setInterval(() => {
        if (obstaclesPerSecond < maxObstaclesPerSecond) {
          obstaclesPerSecond += 0.25;
        }
      }, obstacleIncreaseInterval);
    }

    function moveLeft() {
      if (playerLane > 0) {
        playerLane--;
        moveSound.play().catch(()=>{});
        player.style.left = lanes[playerLane] + "px";
      }
    }
    function moveRight() {
      if (playerLane < lanes.length - 1) {
        playerLane++;
        moveSound.play().catch(()=>{});
        player.style.left = lanes[playerLane] + "px";
      }
    }

    function spawnObstacleBurst(count) {
      const laneBusy = new Set();
      for (let i = 0; i < count; i++) {
        let lane = Math.floor(Math.random() * lanes.length);
        for (let tries = 0; tries < 5; tries++) {
          if (!laneBusy.has(lane) && !isLaneCrowded(lane) && !willBlockAllLanes(lane, laneBusy)) {
            break;
          }
          lane = Math.floor(Math.random() * lanes.length);
        }
        if (!laneBusy.has(lane) && !isLaneCrowded(lane) && !willBlockAllLanes(lane, laneBusy)) {
          laneBusy.add(lane);
          spawnObstacle(lane);
        }
      }
    }

    function isLaneCrowded(lane) {
      return objects.some(o => o.type === "obstacle" && o.lane === lane && o.y < 300);
    }
    function willBlockAllLanes(newLane, laneBusy) {
      return laneBusy.size >= lanes.length - 1;
    }

    function spawnObstacle(lane) {
      const ob = document.createElement("div");
      ob.className = "obstacle";
      const src = obstacleImages[Math.floor(Math.random() * obstacleImages.length)];
      ob.style.backgroundImage = `url(${src})`;
      ob.style.left = lanes[lane] + "px";
      ob.style.top  = "-80px";
      gameArea.appendChild(ob);
      objects.push({ el: ob, type: "obstacle", lane, y: -80 });
    }

    function spawnCoin() {
      const lane = Math.floor(Math.random() * lanes.length);
      const coin = document.createElement("div");
      coin.className = "coin";
      coin.style.left = lanes[lane] + "px";
      coin.style.top  = "-40px";
      gameArea.appendChild(coin);
      objects.push({ el: coin, type: "coin", lane, y: -40 });
    }

    function updateGame() {
      objects.forEach((obj, i) => {
        obj.y += gameSpeed + (obj.type === "coin" ? 0.6 : 1);
        obj.el.style.top = obj.y + "px";
        if (obj.y > gameArea.clientHeight) {
          obj.el.remove();
          objects[i] = null;
          return;
        }
        if (!isOver && obj.lane === playerLane && obj.y > gameArea.clientHeight - 120 && obj.y < gameArea.clientHeight - 40) {
          if (obj.type === "obstacle") {
            obstacleSound.play().catch(()=>{});
            endGame();
          } else if (obj.type === "coin") {
            collectCoin(i);
          }
        }
      });
      objects = objects.filter(Boolean);
    }

    function collectCoin(index) {
      const obj = objects[index];
      if (!obj) return;
      obj.el.remove();
      objects[index] = null;
      score++;
      scoreEl.textContent = score;
      coinSound.play().catch(()=>{});
    }

    function endGame() {
      if (isOver) return;
      isOver = true;
      clearInterval(gameLoop);
      clearInterval(perSecondTimer);
      clearInterval(coinsTimer);
      bgMusic.pause();
      loseSound.play().catch(()=>{});
      gameOverEl.style.display = "block";
    }

    function restartGame() {
      gameOverEl.style.display = "none";
      startGame();
    }
  </script>
</body>
</html>